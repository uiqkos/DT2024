\import Data.List
\import Paths
\import Paths.Meta
\import lect03 (+-comm, fileTest, M5)
\open Nat (+, *)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestValue : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func m5t''' : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | (x :: xs') => pmap (x ::) (++-assoc xs' ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

\func ++nil {A : \Type} (xs : List A) : xs ++ nil = xs
  | nil => idp
  | a :: xs => pmap (a ::) (++nil xs)

-- Это утверждение будет полезно для доказательства.

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => inv (++nil (reverse ys))
  | a :: xs => rewrite (reverse++ xs ys) (++-assoc (reverse ys) (reverse xs) (a :: nil))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | a :: xs =>
    \let
      | i1 => reverse++ (reverse xs) (a :: nil)
      | i2 => reverse-isInvolutive xs
    \in rewrite i1 (pmap (a ::) i2)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\open Nat

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    \let
      | rec =>  rdistr n m k
      | rec+m+k => pmap (`+ (m + k)) rec
      | dist => +-dist m (k * n) k (m * n)
    \in rec+m+k *> dist
  \where {
    \func +-dist (a b c d : Nat) : d + b + (a + c) = d + a + (b + c) \elim a, b
      | 0, 0 => idp
      | suc a, b => pmap suc (+-dist a b c d)
      | 0, suc b => pmap suc (+-dist 0 b c d)
  }


\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m
  | 0 => idp
  | suc m =>
    \let
      | rec =>  ldistr n m k
      | rec+n => pmap (`+ n) rec
      | dist => +-dist (n * m) (n * k) n
    \in rec+n *> dist
  \where {
    \func +-dist (a b c : Nat) : a + b + c = a + c + b \elim a
      | 0 => +-comm b c
      | suc a => pmap suc (+-dist a b c)
  }

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  rewrite p (pmap (f a') q)


-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
  => repl (pmap B p) b