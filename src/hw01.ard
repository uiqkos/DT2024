-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (x y z : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x

\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func \infix 2 f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 4 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 5 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (cond x y : Bool) : Bool \elim cond
  | true => x
  | false => y

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * (x ^ y)

\func pow : 3 ^ 2 = 9 => idp

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

\func fact : fac 5 = 120 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => aux x x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => \case x < y \with {
        | true => x
        | false => aux fuel (x - y) y
      }
  }

\func mod1 : mod 15 4 = 3 => idp

\func gcd (x y : Nat) => aux (min x y) x y
  \where {
    \func min (x y : Nat) : Nat =>
      \case (x < y) \with {
        | true => x
        | false => y
      }
    \func aux (d x y : Nat) : Nat \elim d
      | 0 => 0
      | suc d => \case (mod x (suc d), mod y (suc d)) \with {
        | (0, 0) => suc d
        | _ => aux d x y
      }
  }

\func mod2 : mod 12 6 = 0 => idp
\func mod3 : mod 6 6 = 0 => idp
\func gcd1 : gcd 12 6 = 6 => idp
\func gcd2 : gcd 10 15 = 5 => idp

